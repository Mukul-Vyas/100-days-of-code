Complete the canWin function in the editor below.

canWin has the following parameters: int leap: the size of the leap int game[n]: the array to traverse Returns

boolean: true if the game can be won, otherwise false

Input Format:

The first line contains an integer, q, denoting the number of queries (i.e., function calls).

The 2 . q subsequent lines describe each query over two lines:

The first line contains two space-separated integers describing the respective values of n and leap.

The second line contains n space-separated binary integers (i.e., zeroes and ones) describing the respective values of game0, game1, game2, ..... game n-1.

Constraints:

1<=q<=5000

2<=n<=100

0<=leap<=100

It is guaranteed that the value of game[0] is always 0.

Sample Input

STDIN Function

4 q = 4 (number of queries)

5 3 game[] size n = 5, leap = 3 (first query)

0 0 0 0 0 game = [0, 0, 0, 0, 0]

6 5 game[] size n = 6, leap = 5 (second query)

0 0 0 1 1 1 . . .

6 3

0 0 1 1 1 0

3 1

0 1 0

Sample Output

YES

YES

NO

NO

Explanation

We perform the following q=4 queries:

For game = [0, 0, 0, 0, 0] and leap = 3, we can walk and/or jump to the end of the array because every cell contains a 0. Because we can win, we return true.

For game = [0, 0, 0, 1, 1, 1] and leap = 5, we can walk to index 1 and then jump i+leap = 1+5 = 6 units to the end of the array. Because we can win, we return true.

For game = [0, 0, 1, 1, 1, 0] and leap = 3, there is no way for us to get past the three consecutive ones. Because we cannot win, we return false.

For game = [0, 1, 0] and leap = 1, there is no way for us to get past the one at index 1. Because we cannot win, we return false.
